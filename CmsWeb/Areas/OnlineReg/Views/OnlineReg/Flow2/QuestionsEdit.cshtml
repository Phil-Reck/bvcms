@model CmsWeb.Areas.OnlineReg.Models.OnlineRegPersonModel
@using CmsData
@using CmsData.Registration
@using CmsWeb
@using UtilityExtensions

@if (Model.Parent.SupportMissionTrip)
{
    @Html.Partial("Flow2/SupportMissionTrip", Model)
    return;
}
@if (Model.ManageSubscriptions() || Model.OnlinePledge())
{
    return;
}
@if (!Model.IsValidForExisting && !Model.IsValidForNew)
{
    return;
}
@if (Model.OnlineGiving())
{
    @Html.Partial("Flow2/OnlineGiving", Model)
    @SubmitButton()
    return;
}
@if (Model.IsSpecialScript())
{
    <div class="form-group">
        <div class="col-sm-12">
            @Html.Raw(Model.GetSpecialScript())
        </div>
    </div>
    @SubmitButton()
    return;
}
@{
    Model.Parent.ShowOtherInstructions = true;
}
<div class="form-group">
    <div class="col-sm-12">
        <p class="bg-info pad10">Thank you. Please continue below.</p>
    </div>
</div>
@if (Model.RecordFamilyAttendance())
{
    @Html.Partial("Flow2/RecordFamilyAttendance", Model)
    @SubmitButton()
    return;
}
@if (Model.HasQuestions())
{
    if (Model.Index > 0 && Model.NeedsCopyFromPrevious())
    {
        <div class="pull-right"><a href="#" id="copy" class="btn btn-xs">copy from previous</a></div>
    }
    foreach (var ask in Model.setting.AskItems)
    {
        switch (ask.Type)
        {
            case "AskSize":
                @Html.EditorFor(m => m, "AskSize", new { label = ((AskSize)ask).Label })
                break;
            case "AskRequest":
                @Html.EditorFor(m => m.request,
                        new { label = Util.PickFirst(((AskRequest)ask).Label, "Request") })
                break;
            case "AskHeader":
                @Helper.OnlineRegHeader(((AskHeader)ask).Label)
                break;
            case "AskInstruction":
                @Helper.OnlineRegInstruction(((AskInstruction)ask).Label)
                break;
            case "AskEmContact":
                @Html.EditorFor(m => m.emcontact)
                @Html.EditorFor(m => m.emphone)
                break;
            case "AskInsurance":
                @Html.EditorFor(m => m.insurance)
                @Html.EditorFor(m => m.policy)
                break;
            case "AskPassport":
                @Html.EditorFor(m => m.passportNumber)
                @Html.EditorFor(m => m.passportExpires)
                break;
            case "AskDoctor":
                @Html.EditorFor(m => m.doctor)
                @Html.EditorFor(m => m.docphone)
                break;
            case "AskAllergies":
                @Html.EditorFor(m => m.medical, "TextArea", new { help = "Leave blank if none" })
                break;
            case "AskTylenolEtc":
                @Helper.OnlineRegHeader("May we give your child?")
                @Html.EditorFor(m => m.tylenol, "YesNo")
                @Html.EditorFor(m => m.advil, "YesNo")
                @Html.EditorFor(m => m.maalox, "YesNo")
                @Html.EditorFor(m => m.robitussin, "YesNo")
                break;
            case "AskParents":
                @Html.EditorFor(m => m.mname)
                @Html.EditorFor(m => m.fname)
                break;
            case "AskSMS":
                @Html.EditorFor(m => m.sms, "YesNo")
                break;
            case "AskCoaching":
                @Html.EditorFor(m => m.coaching, "YesNo")
                break;
            case "AskChurch":
                @Html.EditorFor(m => m, "AskChurch")
                break;
            case "AskTickets":
                @Html.EditorFor(m => m.ntickets,
                        new { label = ((AskTickets)ask).Label })
                break;
            case "AskSuggestedFee":
                @Html.EditorFor(m => m.Suggestedfee,
                        new { label = Util.PickFirst(((AskSuggestedFee)ask).Label, "Suggested Fee") })
                break;
            case "AskExtraQuestions":
                @Html.EditorFor(m => m, "AskExtraQuestions", new { ask })
                break;
            case "AskText":
                @Html.EditorFor(m => m, "AskText", new { ask })
                break;
            case "AskYesNoQuestions":
                @Html.EditorFor(m => m, "AskYesNoQuestions", new { ask })
                break;
            case "AskDocuments":
                @Html.EditorFor(m => m, "AskDocuments", new { ask })
                break;
            case "AskDropdown":
                @Html.EditorFor(m => m.option[ask.UniqueId], "AskDropdown",
                        new { items = Model.DropdownList(ask), label = ((AskDropdown)ask).Label })
                break;
            case "AskCheckboxes":
                @(((AskCheckboxes)ask).Columns > 1
                                  ? Html.EditorFor(m => m, "AskCheckboxesMatrix", new { ask })
                                  : Html.EditorFor(m => m, "AskCheckboxes", new { ask }))
                break;
            case "AskMenu":
                @Html.EditorFor(m => m, "AskMenu", new { ask })
                break;
            case "AskGradeOptions":
                @Html.EditorFor(m => m, "AskGradeOptions",
                        new { items = Model.GradeOptions(ask), label = ((AskGradeOptions)ask).Label ?? "Grade Options" })
                break;
            case "AnswersNotRequired":
                break;
            default:
                @Helper.OnlineRegHeader(ask.Type)
                break;
        }
    }
}
@if (Model.setting.Deposit > 0 && (Model.TotalAmount() > 0 || Model.setting.OtherFeesAddedToOrgFee))
{
    @Html.EditorFor(m => m.paydeposit, "PayDepositOrFull")
}
@SubmitButton()

@helper SubmitButton()
{
    <div class="form-group">
        <div class="col-sm-offset-3 col-sm-9 text-right">

            @if ((Model.age >= Model.MinimumUserAge || !Model.BestBirthday.HasValue) && !Model.IsCreateAccount())
            {
                if (Model.InMobileAppMode && !ViewExtensions2.CurrentDatabase.UserPeopleId.HasValue && !Model.LoggedIn)
                {
                    @Html.Hidden("CreatingAccount", true)
                }
                else
                {
                    <div class="checkbox-inline">
                        <label>
                            @Html.CheckBoxFor(m => m.CreatingAccount) Create Account (optional)
                        </label>
                    </div>
                }
            }
            <div>
                @Helper.OnlineRegAjaxButton("/OnlineReg/SubmitQuestions/" + @Model.Index, "Submit",
                    id: "otheredit", style: "btn-primary min-width15em")
            </div>
            @if (Model.Parent.AllowSaveProgress())
            {
                <div>
                    @Helper.OnlineRegAjaxButton("/OnlineReg/SaveProgress", "Save Progress, Finish Later", style: "btn-warning min-width15em")
                </div>
            }
            @Html.DivValidationMessage("Form")
        </div>
    </div>
}
